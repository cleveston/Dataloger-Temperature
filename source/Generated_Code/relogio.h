/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : relogio.h
**     Project     : ProcessorExpert
**     Processor   : MC9S08QE128CLK
**     Component   : TimeDate
**     Version     : Component 02.111, Driver 01.24, CPU db: 3.00.067
**     Compiler    : CodeWarrior HCS08 C Compiler
**     Date/Time   : 2015-06-25, 15:40, # CodeGen: 14
**     Abstract    :
**         This component "TimeDate" implements real time and date.
**         The component requires a periodic interrupt generator: timer
**         compare or reload register or timer-overflow interrupt
**         (of free running counter). User can select precision of
**         selected timer.
**         The component supports also alarm with event OnAlarm.
**     Settings    :
**         Timer name                  : RTC (8-bit)
**
**         Counter                     : RTCCNT    [$1831]
**         Mode register               : RTCSC     [$1830]
**         Run register                : RTCSC     [$1830]
**         Prescaler                   : RTCSC     [$1830]
**         Compare register            : RTCMOD    [$1832]
**
**         Interrupt name              : Vrtc
**         Interrupt enable reg.       : RTCSC     [$1830]
**         Priority                    : 
**         User handling procedure     : not specified
**
**         High speed mode
**             Prescaler               : divide-by-1
**             Clock                   : 16384 Hz
**           Resolution of timer
**             Xtal ticks              : 328
**             microseconds            : 10010
**             milliseconds            : 10
**             seconds (real)          : 0.010009765625
**             Hz                      : 100
**
**         Initialization:
**              Timer                  : Enabled
**
**              Time                   : 0:0:0
**              Date                   : 1/1/2008
**     Contents    :
**         SetTime - byte relogio_SetTime(byte Hour, byte Min, byte Sec, byte Sec100);
**         GetTime - byte relogio_GetTime(TIMEREC *Time);
**         SetDate - byte relogio_SetDate(word Year, byte Month, byte Day);
**         GetDate - byte relogio_GetDate(DATEREC *Date);
**
**     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
**     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/
/*!
** @file relogio.h
** @version 01.24
** @brief
**         This component "TimeDate" implements real time and date.
**         The component requires a periodic interrupt generator: timer
**         compare or reload register or timer-overflow interrupt
**         (of free running counter). User can select precision of
**         selected timer.
**         The component supports also alarm with event OnAlarm.
*/         
/*!
**  @addtogroup relogio_module relogio module documentation
**  @{
*/         

#ifndef __relogio
#define __relogio

/* MODULE relogio. */

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited components */

#include "Cpu.h"
#include <limits.h>


#ifndef __BWUserType_TIMEREC
#define __BWUserType_TIMEREC
  typedef struct {                     /* It contains actual number of hours, minutes, seconds and hundreths of seconds. */
    byte Hour;                         /* hours (0 - 23) */
    byte Min;                          /* minutes (0 - 59) */
    byte Sec;                          /* seconds (0 - 59) */
    byte Sec100;                       /* hundredths of seconds (0 - 99) */
  } TIMEREC;
#endif
#ifndef __BWUserType_DATEREC
#define __BWUserType_DATEREC
  typedef struct {                     /* It contains actual year, month, and day description. */
    word Year;                         /* years (1998 - 2099) */
    byte Month;                        /* months (1 - 12) */
    byte Day;                          /* days (1 - 31) */
  } DATEREC;
#endif




byte relogio_SetTime(byte Hour,byte Min,byte Sec,byte Sec100);
/*
** ===================================================================
**     Method      :  relogio_SetTime (component TimeDate)
**     Description :
**         This method sets a new actual time.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Hour            - Hours (0 - 23)
**         Min             - Minutes (0 - 59)
**         Sec             - Seconds (0 - 59)
**         Sec100          - Hundredths of seconds (0 - 99)
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_RANGE - Parameter out of range
** ===================================================================
*/

byte relogio_GetTime(TIMEREC *Time);
/*
** ===================================================================
**     Method      :  relogio_GetTime (component TimeDate)
**     Description :
**         This method returns current time.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Time            - Pointer to the structure TIMEREC. It
**                           contains actual number of hours, minutes,
**                           seconds and hundredths of seconds.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte relogio_SetDate(word Year,byte Month,byte Day);
/*
** ===================================================================
**     Method      :  relogio_SetDate (component TimeDate)
**     Description :
**         This method sets a new actual date. See limitations at the
**         page <General Info>.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Year            - Years (16-bit unsigned integer)
**         Month           - Months (8-bit unsigned integer)
**         Day             - Days (8-bit unsigned integer)
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_RANGE - Parameter out of range
** ===================================================================
*/

byte relogio_GetDate(DATEREC *Date);
/*
** ===================================================================
**     Method      :  relogio_GetDate (component TimeDate)
**     Description :
**         This method returns current date.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Date            - Pointer to the structure DATEREC. It
**                           contains actual year, month, and day
**                           description.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

void relogio_InitTD(void);
/*
** ===================================================================
**     Method      :  relogio_InitTD (component TimeDate)
**
**     Description :
**         Initializes the associated peripheral(s) and the component 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

__interrupt void relogio_Interrupt(void);
/*
** ===================================================================
**     Method      :  relogio_Interrupt (component TimeDate)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes the component event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void relogio_HWEnDi(void);
/*
** ===================================================================
**     Method      :  relogio_HWEnDi (component TimeDate)
**
**     Description :
**         Enables or disables the peripheral(s) associated with the 
**         component. The method is called automatically as a part of the 
**         Enable and Disable methods and several internal methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


/* END relogio. */

#endif /* ifndef __relogio */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.08]
**     for the Freescale HCS08 series of microcontrollers.
**
** ###################################################################
*/
